// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PrecompileConfig is an auto generated low-level Go binding around an user-defined struct.
type PrecompileConfig struct {
	PrecompileAddress common.Address
	NumCalls          *big.Int
}

// SimulatorConfig is an auto generated low-level Go binding around an user-defined struct.
type SimulatorConfig struct {
	LoadAccounts   *big.Int
	UpdateAccounts *big.Int
	CreateAccounts *big.Int
	LoadStorage    *big.Int
	UpdateStorage  *big.Int
	DeleteStorage  *big.Int
	CreateStorage  *big.Int
	Precompiles    []PrecompileConfig
}

// SimulatorMetaData contains all meta data concerning the Simulator contract.
var SimulatorMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"offset\",\"type\":\"uint160\",\"internalType\":\"uint160\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"hashLongString\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"initialize_address_chunk\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize_storage_chunk\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"num_accounts_needed\",\"inputs\":[{\"name\":\"config\",\"type\":\"tuple\",\"internalType\":\"structSimulatorConfig\",\"components\":[{\"name\":\"load_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"update_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"create_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"load_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"update_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delete_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"create_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"precompiles\",\"type\":\"tuple[]\",\"internalType\":\"structPrecompileConfig[]\",\"components\":[{\"name\":\"precompile_address\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"num_calls\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"uint160\",\"internalType\":\"uint160\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"num_address_initialized\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint160\",\"internalType\":\"uint160\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"num_storage_deleted\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"num_storage_initialized\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"num_storage_slots_needed\",\"inputs\":[{\"name\":\"config\",\"type\":\"tuple\",\"internalType\":\"structSimulatorConfig\",\"components\":[{\"name\":\"load_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"update_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"create_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"load_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"update_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delete_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"create_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"precompiles\",\"type\":\"tuple[]\",\"internalType\":\"structPrecompileConfig[]\",\"components\":[{\"name\":\"precompile_address\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"num_calls\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"run\",\"inputs\":[{\"name\":\"config\",\"type\":\"tuple\",\"internalType\":\"structSimulatorConfig\",\"components\":[{\"name\":\"load_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"update_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"create_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"load_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"update_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delete_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"create_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"precompiles\",\"type\":\"tuple[]\",\"internalType\":\"structPrecompileConfig[]\",\"components\":[{\"name\":\"precompile_address\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"num_calls\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"}]",
	Bin: "",
}

// SimulatorABI is the input ABI used to generate the binding from.
// Deprecated: Use SimulatorMetaData.ABI instead.
var SimulatorABI = SimulatorMetaData.ABI

// SimulatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimulatorMetaData.Bin instead.
var SimulatorBin = SimulatorMetaData.Bin

// DeploySimulator deploys a new Ethereum contract, binding an instance of Simulator to it.
func DeploySimulator(auth *bind.TransactOpts, backend bind.ContractBackend, offset *big.Int) (common.Address, *types.Transaction, *Simulator, error) {
	parsed, err := SimulatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimulatorBin), backend, offset)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Simulator{SimulatorCaller: SimulatorCaller{contract: contract}, SimulatorTransactor: SimulatorTransactor{contract: contract}, SimulatorFilterer: SimulatorFilterer{contract: contract}}, nil
}

// Simulator is an auto generated Go binding around an Ethereum contract.
type Simulator struct {
	SimulatorCaller     // Read-only binding to the contract
	SimulatorTransactor // Write-only binding to the contract
	SimulatorFilterer   // Log filterer for contract events
}

// SimulatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimulatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimulatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimulatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimulatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimulatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimulatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimulatorSession struct {
	Contract     *Simulator        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimulatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimulatorCallerSession struct {
	Contract *SimulatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SimulatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimulatorTransactorSession struct {
	Contract     *SimulatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SimulatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimulatorRaw struct {
	Contract *Simulator // Generic contract binding to access the raw methods on
}

// SimulatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimulatorCallerRaw struct {
	Contract *SimulatorCaller // Generic read-only contract binding to access the raw methods on
}

// SimulatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimulatorTransactorRaw struct {
	Contract *SimulatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimulator creates a new instance of Simulator, bound to a specific deployed contract.
func NewSimulator(address common.Address, backend bind.ContractBackend) (*Simulator, error) {
	contract, err := bindSimulator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Simulator{SimulatorCaller: SimulatorCaller{contract: contract}, SimulatorTransactor: SimulatorTransactor{contract: contract}, SimulatorFilterer: SimulatorFilterer{contract: contract}}, nil
}

// NewSimulatorCaller creates a new read-only instance of Simulator, bound to a specific deployed contract.
func NewSimulatorCaller(address common.Address, caller bind.ContractCaller) (*SimulatorCaller, error) {
	contract, err := bindSimulator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimulatorCaller{contract: contract}, nil
}

// NewSimulatorTransactor creates a new write-only instance of Simulator, bound to a specific deployed contract.
func NewSimulatorTransactor(address common.Address, transactor bind.ContractTransactor) (*SimulatorTransactor, error) {
	contract, err := bindSimulator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimulatorTransactor{contract: contract}, nil
}

// NewSimulatorFilterer creates a new log filterer instance of Simulator, bound to a specific deployed contract.
func NewSimulatorFilterer(address common.Address, filterer bind.ContractFilterer) (*SimulatorFilterer, error) {
	contract, err := bindSimulator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimulatorFilterer{contract: contract}, nil
}

// bindSimulator binds a generic wrapper to an already deployed contract.
func bindSimulator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimulatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Simulator *SimulatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Simulator.Contract.SimulatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Simulator *SimulatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simulator.Contract.SimulatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Simulator *SimulatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Simulator.Contract.SimulatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Simulator *SimulatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Simulator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Simulator *SimulatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simulator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Simulator *SimulatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Simulator.Contract.contract.Transact(opts, method, params...)
}

// HashLongString is a free data retrieval call binding the contract method 0x7b582866.
//
// Solidity: function hashLongString() pure returns(string)
func (_Simulator *SimulatorCaller) HashLongString(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "hashLongString")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// HashLongString is a free data retrieval call binding the contract method 0x7b582866.
//
// Solidity: function hashLongString() pure returns(string)
func (_Simulator *SimulatorSession) HashLongString() (string, error) {
	return _Simulator.Contract.HashLongString(&_Simulator.CallOpts)
}

// HashLongString is a free data retrieval call binding the contract method 0x7b582866.
//
// Solidity: function hashLongString() pure returns(string)
func (_Simulator *SimulatorCallerSession) HashLongString() (string, error) {
	return _Simulator.Contract.HashLongString(&_Simulator.CallOpts)
}

// NumAccountsNeeded is a free data retrieval call binding the contract method 0xcb805ac1.
//
// Solidity: function num_accounts_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint160)
func (_Simulator *SimulatorCaller) NumAccountsNeeded(opts *bind.CallOpts, config SimulatorConfig) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_accounts_needed", config)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumAccountsNeeded is a free data retrieval call binding the contract method 0xcb805ac1.
//
// Solidity: function num_accounts_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint160)
func (_Simulator *SimulatorSession) NumAccountsNeeded(config SimulatorConfig) (*big.Int, error) {
	return _Simulator.Contract.NumAccountsNeeded(&_Simulator.CallOpts, config)
}

// NumAccountsNeeded is a free data retrieval call binding the contract method 0xcb805ac1.
//
// Solidity: function num_accounts_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint160)
func (_Simulator *SimulatorCallerSession) NumAccountsNeeded(config SimulatorConfig) (*big.Int, error) {
	return _Simulator.Contract.NumAccountsNeeded(&_Simulator.CallOpts, config)
}

// NumAddressInitialized is a free data retrieval call binding the contract method 0xe2b5a25c.
//
// Solidity: function num_address_initialized() view returns(uint160)
func (_Simulator *SimulatorCaller) NumAddressInitialized(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_address_initialized")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumAddressInitialized is a free data retrieval call binding the contract method 0xe2b5a25c.
//
// Solidity: function num_address_initialized() view returns(uint160)
func (_Simulator *SimulatorSession) NumAddressInitialized() (*big.Int, error) {
	return _Simulator.Contract.NumAddressInitialized(&_Simulator.CallOpts)
}

// NumAddressInitialized is a free data retrieval call binding the contract method 0xe2b5a25c.
//
// Solidity: function num_address_initialized() view returns(uint160)
func (_Simulator *SimulatorCallerSession) NumAddressInitialized() (*big.Int, error) {
	return _Simulator.Contract.NumAddressInitialized(&_Simulator.CallOpts)
}

// NumStorageDeleted is a free data retrieval call binding the contract method 0x39aa1ab9.
//
// Solidity: function num_storage_deleted() view returns(uint256)
func (_Simulator *SimulatorCaller) NumStorageDeleted(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_storage_deleted")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStorageDeleted is a free data retrieval call binding the contract method 0x39aa1ab9.
//
// Solidity: function num_storage_deleted() view returns(uint256)
func (_Simulator *SimulatorSession) NumStorageDeleted() (*big.Int, error) {
	return _Simulator.Contract.NumStorageDeleted(&_Simulator.CallOpts)
}

// NumStorageDeleted is a free data retrieval call binding the contract method 0x39aa1ab9.
//
// Solidity: function num_storage_deleted() view returns(uint256)
func (_Simulator *SimulatorCallerSession) NumStorageDeleted() (*big.Int, error) {
	return _Simulator.Contract.NumStorageDeleted(&_Simulator.CallOpts)
}

// NumStorageInitialized is a free data retrieval call binding the contract method 0xee2bb32b.
//
// Solidity: function num_storage_initialized() view returns(uint256)
func (_Simulator *SimulatorCaller) NumStorageInitialized(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_storage_initialized")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStorageInitialized is a free data retrieval call binding the contract method 0xee2bb32b.
//
// Solidity: function num_storage_initialized() view returns(uint256)
func (_Simulator *SimulatorSession) NumStorageInitialized() (*big.Int, error) {
	return _Simulator.Contract.NumStorageInitialized(&_Simulator.CallOpts)
}

// NumStorageInitialized is a free data retrieval call binding the contract method 0xee2bb32b.
//
// Solidity: function num_storage_initialized() view returns(uint256)
func (_Simulator *SimulatorCallerSession) NumStorageInitialized() (*big.Int, error) {
	return _Simulator.Contract.NumStorageInitialized(&_Simulator.CallOpts)
}

// NumStorageSlotsNeeded is a free data retrieval call binding the contract method 0x768c39af.
//
// Solidity: function num_storage_slots_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint256)
func (_Simulator *SimulatorCaller) NumStorageSlotsNeeded(opts *bind.CallOpts, config SimulatorConfig) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_storage_slots_needed", config)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStorageSlotsNeeded is a free data retrieval call binding the contract method 0x768c39af.
//
// Solidity: function num_storage_slots_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint256)
func (_Simulator *SimulatorSession) NumStorageSlotsNeeded(config SimulatorConfig) (*big.Int, error) {
	return _Simulator.Contract.NumStorageSlotsNeeded(&_Simulator.CallOpts, config)
}

// NumStorageSlotsNeeded is a free data retrieval call binding the contract method 0x768c39af.
//
// Solidity: function num_storage_slots_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint256)
func (_Simulator *SimulatorCallerSession) NumStorageSlotsNeeded(config SimulatorConfig) (*big.Int, error) {
	return _Simulator.Contract.NumStorageSlotsNeeded(&_Simulator.CallOpts, config)
}

// InitializeAddressChunk is a paid mutator transaction binding the contract method 0x3594dea6.
//
// Solidity: function initialize_address_chunk() returns()
func (_Simulator *SimulatorTransactor) InitializeAddressChunk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simulator.contract.Transact(opts, "initialize_address_chunk")
}

// InitializeAddressChunk is a paid mutator transaction binding the contract method 0x3594dea6.
//
// Solidity: function initialize_address_chunk() returns()
func (_Simulator *SimulatorSession) InitializeAddressChunk() (*types.Transaction, error) {
	return _Simulator.Contract.InitializeAddressChunk(&_Simulator.TransactOpts)
}

// InitializeAddressChunk is a paid mutator transaction binding the contract method 0x3594dea6.
//
// Solidity: function initialize_address_chunk() returns()
func (_Simulator *SimulatorTransactorSession) InitializeAddressChunk() (*types.Transaction, error) {
	return _Simulator.Contract.InitializeAddressChunk(&_Simulator.TransactOpts)
}

// InitializeStorageChunk is a paid mutator transaction binding the contract method 0x4e83a9d5.
//
// Solidity: function initialize_storage_chunk() returns()
func (_Simulator *SimulatorTransactor) InitializeStorageChunk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simulator.contract.Transact(opts, "initialize_storage_chunk")
}

// InitializeStorageChunk is a paid mutator transaction binding the contract method 0x4e83a9d5.
//
// Solidity: function initialize_storage_chunk() returns()
func (_Simulator *SimulatorSession) InitializeStorageChunk() (*types.Transaction, error) {
	return _Simulator.Contract.InitializeStorageChunk(&_Simulator.TransactOpts)
}

// InitializeStorageChunk is a paid mutator transaction binding the contract method 0x4e83a9d5.
//
// Solidity: function initialize_storage_chunk() returns()
func (_Simulator *SimulatorTransactorSession) InitializeStorageChunk() (*types.Transaction, error) {
	return _Simulator.Contract.InitializeStorageChunk(&_Simulator.TransactOpts)
}

// Run is a paid mutator transaction binding the contract method 0x458240e8.
//
// Solidity: function run((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) returns()
func (_Simulator *SimulatorTransactor) Run(opts *bind.TransactOpts, config SimulatorConfig) (*types.Transaction, error) {
	return _Simulator.contract.Transact(opts, "run", config)
}

// Run is a paid mutator transaction binding the contract method 0x458240e8.
//
// Solidity: function run((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) returns()
func (_Simulator *SimulatorSession) Run(config SimulatorConfig) (*types.Transaction, error) {
	return _Simulator.Contract.Run(&_Simulator.TransactOpts, config)
}

// Run is a paid mutator transaction binding the contract method 0x458240e8.
//
// Solidity: function run((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) returns()
func (_Simulator *SimulatorTransactorSession) Run(config SimulatorConfig) (*types.Transaction, error) {
	return _Simulator.Contract.Run(&_Simulator.TransactOpts, config)
}
