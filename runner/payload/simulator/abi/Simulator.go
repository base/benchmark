// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PrecompileConfig is an auto generated low-level Go binding around an user-defined struct.
type PrecompileConfig struct {
	PrecompileAddress common.Address
	NumCalls          *big.Int
}

// SimulatorConfig is an auto generated low-level Go binding around an user-defined struct.
type SimulatorConfig struct {
	LoadAccounts   *big.Int
	UpdateAccounts *big.Int
	CreateAccounts *big.Int
	LoadStorage    *big.Int
	UpdateStorage  *big.Int
	DeleteStorage  *big.Int
	CreateStorage  *big.Int
	Precompiles    []PrecompileConfig
}

// SimulatorMetaData contains all meta data concerning the Simulator contract.
var SimulatorMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"offset\",\"type\":\"uint160\",\"internalType\":\"uint160\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"hashLongString\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"initialize_address_chunk\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"initialize_storage_chunk\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"num_accounts_needed\",\"inputs\":[{\"name\":\"config\",\"type\":\"tuple\",\"internalType\":\"structSimulatorConfig\",\"components\":[{\"name\":\"load_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"update_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"create_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"load_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"update_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delete_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"create_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"precompiles\",\"type\":\"tuple[]\",\"internalType\":\"structPrecompileConfig[]\",\"components\":[{\"name\":\"precompile_address\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"num_calls\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"uint160\",\"internalType\":\"uint160\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"num_address_initialized\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint160\",\"internalType\":\"uint160\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"num_storage_deleted\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"num_storage_initialized\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"num_storage_slots_needed\",\"inputs\":[{\"name\":\"config\",\"type\":\"tuple\",\"internalType\":\"structSimulatorConfig\",\"components\":[{\"name\":\"load_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"update_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"create_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"load_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"update_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delete_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"create_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"precompiles\",\"type\":\"tuple[]\",\"internalType\":\"structPrecompileConfig[]\",\"components\":[{\"name\":\"precompile_address\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"num_calls\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"run\",\"inputs\":[{\"name\":\"config\",\"type\":\"tuple\",\"internalType\":\"structSimulatorConfig\",\"components\":[{\"name\":\"load_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"update_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"create_accounts\",\"type\":\"uint160\",\"internalType\":\"uint160\"},{\"name\":\"load_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"update_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"delete_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"create_storage\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"precompiles\",\"type\":\"tuple[]\",\"internalType\":\"structPrecompileConfig[]\",\"components\":[{\"name\":\"precompile_address\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"num_calls\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"}]",
	Bin: "0x60806040527002000000000000000000000000000000006001556202000060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507002000000000000000000000000000000006003557002000000000000000000000000000000006004556202000060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405161553538038061553583398181016040528101906100ea9190610219565b8060055f8282829054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661011a9190610271565b92506101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060025f8282829054906101000a900473ffffffffffffffffffffffffffffffffffffffff166101889190610271565b92506101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102b8565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b6101f8816101d0565b8114610202575f5ffd5b50565b5f81519050610213816101ef565b92915050565b5f6020828403121561022e5761022d6101cc565b5b5f61023b84828501610205565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61027b826101d0565b9150610286836101d0565b9250828201905073ffffffffffffffffffffffffffffffffffffffff8111156102b2576102b1610244565b5b92915050565b615270806102c55f395ff3fe608060405234801561000f575f5ffd5b5060043610610091575f3560e01c8063768c39af11610064578063768c39af146100e35780637b58286614610113578063cb805ac114610131578063e2b5a25c14610161578063ee2bb32b1461017f57610091565b80633594dea61461009557806339aa1ab91461009f578063458240e8146100bd5780634e83a9d5146100d9575b5f5ffd5b61009d61019d565b005b6100a76102e6565b6040516100b491906136dc565b60405180910390f35b6100d760048036038101906100d29190613729565b6102ec565b005b6100e16109ed565b005b6100fd60048036038101906100f89190613729565b610a52565b60405161010a91906136dc565b60405180910390f35b61011b610a7b565b60405161012891906137e0565b60405180910390f35b61014b60048036038101906101469190613729565b610aa5565b604051610158919061382e565b60405180910390f35b610169610b08565b604051610176919061382e565b60405180910390f35b610187610b2d565b60405161019491906136dc565b60405180910390f35b5f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f606460025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166101f19190613874565b90505f5f8390505b8273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610271578073ffffffffffffffffffffffffffffffffffffffff166108fc600190811502906040515f60405180830381858888f19350505050915080806001019150506101f9565b50606460025f8282829054906101000a900473ffffffffffffffffffffffffffffffffffffffff166102a39190613874565b92506101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60035481565b6001548160800135826060013560045461030691906138bb565b61031091906138bb565b1115610351576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103489061395e565b60405180910390fd5b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681602001602081019061039c91906139a6565b825f0160208101906103ae91906139a6565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103da9190613874565b6103e49190613874565b73ffffffffffffffffffffffffffffffffffffffff16111561043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043290613a41565b60405180910390fd5b5f5f90505f60045490505b826060013560045461045891906138bb565b811015610472578054820191508080600101915050610446565b50816060013560045f82825461048891906138bb565b925050819055505f60045490505b82608001356004546104a891906138bb565b8110156104bf578081558080600101915050610496565b50816080013560045f8282546104d591906138bb565b925050819055505f60015490505b8260c001356001546104f591906138bb565b81101561050c5780815580806001019150506104e3565b508160c0013560015f82825461052291906138bb565b925050819055505f60035490505b8260a0013560035461054291906138bb565b811015610559575f81558080600101915050610530565b508160a0013560035f82825461056f91906138bb565b925050819055505f60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b8260400160208101906105af91906139a6565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166105db9190613874565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161015610651578073ffffffffffffffffffffffffffffffffffffffff166108fc600190811502906040515f60405180830381858888f1935050505050808060010191505061059c565b5081604001602081019061066591906139a6565b60025f8282829054906101000a900473ffffffffffffffffffffffffffffffffffffffff166106949190613874565b92506101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b825f01602081019061070a91906139a6565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107369190613874565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1610156107765780806001019150506106f8565b50815f01602081019061078991906139a6565b60055f8282829054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107b89190613874565b92506101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b82602001602081019061082f91906139a6565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661085b9190613874565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1610156108d1578073ffffffffffffffffffffffffffffffffffffffff166108fc600190811502906040515f60405180830381858888f1935050505050808060010191505061081c565b508160200160208101906108e591906139a6565b60055f8282829054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109149190613874565b92506101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f5f90505b828060e001906109679190613a6b565b90508110156109e8576109db838060e001906109839190613a6b565b8381811061099457610993613acd565b5b9050604002015f0160208101906109ab9190613b35565b848060e001906109bb9190613a6b565b848181106109cc576109cb613acd565b5b90506040020160200135610b33565b8080600101915050610957565b505050565b5f60015490505f6064600154610a0391906138bb565b90505f8290505b81811015610a3457805f5f8381526020019081526020015f20819055508080600101915050610a0a565b50606460015f828254610a4791906138bb565b925050819055505050565b5f81608001358260600135600454610a6a91906138bb565b610a7491906138bb565b9050919050565b60605f604051602001610a8d90613ff2565b60405160208183030381529060405290508091505090565b5f816020016020810190610ab991906139a6565b825f016020810190610acb91906139a6565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610af79190613874565b610b019190613874565b9050919050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b600173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b7557610b7081610fed565b610fe9565b600273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bb957610bb48160016110b3565b610fe8565b600373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bfd57610bf88160016111c3565b610fe7565b600473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c4157610c3c81600161129b565b610fe6565b600573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c8557610c808160016113d9565b610fe5565b600673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cc757610cc2816115ed565b610fe4565b600773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d0957610d048161174e565b610fe3565b600873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d4b57610d46816118a7565b610fe2565b600973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d8d57610d8881611bd0565b610fe1565b61010073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dd057610dcb81611f82565b610fe0565b600b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e1257610e0d81612114565b610fdf565b600c73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e5457610e4f816123e5565b610fde565b600d73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e9657610e91816125f5565b610fdd565b600e73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ed857610ed381612a86565b610fdc565b600f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f1a57610f1581612f42565b610fdb565b601073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f5c57610f57816132dd565b610fda565b601173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f9e57610f9981613454565b610fd9565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd090614137565b60405180910390fd5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5050565b5f601c90505f7f9242685bf161793cc25603c231bc2f568eb630ea16aa137d2664ac80388256085f1b90505f7f4f8ae3bd7535248d0bd448298cc2e2071e56992d0774dc340c368ae950852ada5f1b90505f5f90505b848110156110ac575f815f1b90506001818686866040515f81526020016040526040516110739493929190614188565b6020604051602081039080840390855afa158015611093573d5f5f3e3d5ffd5b5050506020604051035150508080600101915050611043565b5050505050565b5f5f90505b828110156111be5781156111425760026110d0610a7b565b826040516020016110e292919061421b565b6040516020818303038152906040526040516110fe9190614286565b602060405180830381855afa158015611119573d5f5f3e3d5ffd5b5050506040513d601f19601f8201168201806040525081019061113c91906142c6565b506111b1565b60028160405160200161115591906142f1565b6040516020818303038152906040526040516111719190614286565b602060405180830381855afa15801561118c573d5f5f3e3d5ffd5b5050506040513d601f19601f820116820180604052508101906111af91906142c6565b505b80806001019150506110b8565b505050565b5f5f90505b828110156112965781156112365760036111e0610a7b565b826040516020016111f292919061421b565b60405160208183030381529060405260405161120e9190614286565b602060405180830381855afa158015611229573d5f5f3e3d5ffd5b5050506040515150611289565b60038160405160200161124991906142f1565b6040516020818303038152906040526040516112659190614286565b602060405180830381855afa158015611280573d5f5f3e3d5ffd5b50505060405151505b80806001019150506111c8565b505050565b5f5f90505b828110156113d457811561134157600473ffffffffffffffffffffffffffffffffffffffff166112ce610a7b565b826040516020016112e092919061430b565b6040516020818303038152906040526040516112fc9190614286565b5f60405180830381855afa9150503d805f8114611334576040519150601f19603f3d011682016040523d82523d5f602084013e611339565b606091505b5050506113c7565b600473ffffffffffffffffffffffffffffffffffffffff168160405160200161136a91906136dc565b6040516020818303038152906040526040516113869190614286565b5f60405180830381855afa9150503d805f81146113be576040519150601f19603f3d011682016040523d82523d5f602084013e6113c3565b606091505b5050505b80806001019150506112a0565b505050565b5f6040518060400160405280600181526020017f380000000000000000000000000000000000000000000000000000000000000081525090505f6040518060400160405280600181526020017f390000000000000000000000000000000000000000000000000000000000000081525090505f5f90505b848110156115e6578315611522575f611467610a7b565b8260405160200161147992919061421b565b6040516020818303038152906040529050600573ffffffffffffffffffffffffffffffffffffffff168451845183518787866040516020016114c096959493929190614339565b6040516020818303038152906040526040516114dc9190614286565b5f60405180830381855afa9150503d805f8114611514576040519150601f19603f3d011682016040523d82523d5f602084013e611519565b606091505b505050506115d9565b5f8160405160200161153491906142f1565b6040516020818303038152906040529050600573ffffffffffffffffffffffffffffffffffffffff1684518451835187878660405160200161157b96959493929190614339565b6040516020818303038152906040526040516115979190614286565b5f60405180830381855afa9150503d805f81146115cf576040519150601f19603f3d011682016040523d82523d5f602084013e6115d4565b606091505b505050505b8080600101915050611450565b5050505050565b5f7f030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd390505f7f15ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c490505f600190505f600290505f5f90505b85811015611746575f5f600673ffffffffffffffffffffffffffffffffffffffff168787878760405160200161167d949392919061439c565b6040516020818303038152906040526040516116999190614286565b5f60405180830381855afa9150503d805f81146116d1576040519150601f19603f3d011682016040523d82523d5f602084013e6116d6565b606091505b50915091508161171b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171290614429565b60405180910390fd5b8080602001905181019061172f9190614471565b809550819650505050508080600101915050611644565b505050505050565b5f7f030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd390505f7f15ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c490505f600290505f5f90505b848110156118a0575f5f600773ffffffffffffffffffffffffffffffffffffffff168686866040516020016117d7939291906144af565b6040516020818303038152906040526040516117f39190614286565b5f60405180830381855afa9150503d805f811461182b576040519150601f19603f3d011682016040523d82523d5f602084013e611830565b606091505b509150915081611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c9061452e565b60405180910390fd5b808060200190518101906118899190614471565b8096508197505050505080806001019150506117a0565b5050505050565b5f6040518060c001604052807f2cf44499d5d27bb186308b7af7af02ac5bc9eeb6a3d147c186b21fb1b76e18da81526020017f2c0f001f52110ccfe69108924926e45f0b0c868df0e7bde1fe16d3242dc715f681526020017f1fb19bb476f6b9e44e2a32234da8212f61cd63919354bc06aef31e3cfaff3ebc81526020017f22606845ff186793914e03e21df544c34ffe2f2f3504de8a79d9159eca2d98d981526020017f2bd368e28381e8eccb5fa81fc26cf3f048eea9abfdd85d7ed3ab3698d63e4f9081526020017f2fe02e47887507adf0ff1743cbac6ba291e66f59be6bd763950bb16041a0a85e81525090505f5f90505b82811015611bcb575f5f600873ffffffffffffffffffffffffffffffffffffffff16846040516020016119cf91906145f1565b6040516020818303038152906040526040516119eb9190614286565b5f60405180830381855afa9150503d805f8114611a23576040519150601f19603f3d011682016040523d82523d5f602084013e611a28565b606091505b509150915081611a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6490614654565b60405180910390fd5b600673ffffffffffffffffffffffffffffffffffffffff16845f60068110611a9857611a97613acd565b5b602002015185600160068110611ab157611ab0613acd565b5b602002015160016002604051602001611acd94939291906146ed565b604051602081830303815290604052604051611ae99190614286565b5f60405180830381855afa9150503d805f8114611b21576040519150601f19603f3d011682016040523d82523d5f602084013e611b26565b606091505b50809250819350505081611b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6690614429565b60405180910390fd5b80806020019051810190611b839190614471565b855f60068110611b9657611b95613acd565b5b6020020186600160068110611bae57611bad613acd565b5b60200201828152508281525050505050808060010191505061199c565b505050565b611bd861363b565b7f48c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa55f1b815f60028110611c0e57611c0d613acd565b5b6020020181815250507fd182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b5f1b81600160028110611c4e57611c4d613acd565b5b602002018181525050611c5f61365d565b7f61626300000000000000000000000000000000000000000000000000000000005f1b815f60048110611c9557611c94613acd565b5b6020020181815250505f5f1b81600160048110611cb557611cb4613acd565b5b6020020181815250505f5f1b81600260048110611cd557611cd4613acd565b5b6020020181815250505f5f1b81600360048110611cf557611cf4613acd565b5b602002018181525050611d0661367f565b67030000000000000060c01b815f60028110611d2557611d24613acd565b5b602002019077ffffffffffffffffffffffffffffffffffffffffffffffff1916908177ffffffffffffffffffffffffffffffffffffffffffffffff1916815250505f60c01b81600160028110611d7e57611d7d613acd565b5b602002019077ffffffffffffffffffffffffffffffffffffffffffffffff1916908177ffffffffffffffffffffffffffffffffffffffffffffffff1916815250505f600190505f5f90505b85811015611f7a575f8190505f600973ffffffffffffffffffffffffffffffffffffffff1682885f60028110611e0257611e01613acd565b5b602002015189600160028110611e1b57611e1a613acd565b5b6020020151895f60048110611e3357611e32613acd565b5b60200201518a600160048110611e4c57611e4b613acd565b5b60200201518b600260048110611e6557611e64613acd565b5b60200201518c600360048110611e7e57611e7d613acd565b5b60200201518c5f60028110611e9657611e95613acd565b5b60200201518d600160028110611eaf57611eae613acd565b5b60200201518d604051602001611ece9a9998979695949392919061482e565b604051602081830303815290604052604051611eea9190614286565b5f60405180830381855afa9150503d805f8114611f22576040519150601f19603f3d011682016040523d82523d5f602084013e611f27565b606091505b5050905080611f6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f629061492b565b60405180910390fd5b50508080600101915050611dc9565b505050505050565b5f7f31a80482dadf89de6302b1988c82c29544c9c07bb910596158f6062517eb089a5f1b90505f7f2f54c9a0f348752950094d3228d3b940258c75fe2a413cb70baa21dc2e352fc55f1b90505f7fe22466e928fdccef0de49e3503d2657d00494a00e764fd437bdafa05f5922b1f5f1b90505f7fbbb77c6817ccf50748419477e843d5bac67e6a70e97dde5a57e0c983b777e1ad5f1b90505f5f90505b8581101561210c575f815f1b90505f61010073ffffffffffffffffffffffffffffffffffffffff168286868a8a604051602001612060959493929190614949565b60405160208183030381529060405260405161207c9190614286565b5f60405180830381855afa9150503d805f81146120b4576040519150601f19603f3d011682016040523d82523d5f602084013e6120b9565b606091505b50509050806120fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f4906149e4565b60405180910390fd5b5050808060010191505061201f565b505050505050565b61211c61365d565b6f17f1d3a73197d7942695638c4fa9ac0f5f1b815f6004811061214257612141613acd565b5b6020020181815250507fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb5f1b8160016004811061218257612181613acd565b5b6020020181815250506f08b3f481e3aaa0f1a09e30ed741d8ae45f1b816002600481106121b2576121b1613acd565b5b6020020181815250507ffcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e15f1b816003600481106121f2576121f1613acd565b5b60200201818152505061220361365d565b6f112b98340eee2777cc3c14163dea3ec95f1b815f6004811061222957612228613acd565b5b6020020181815250507f7977ac3dc5c70da32e6e87578f44912e902ccef9efe28d4a78b8999dfbca94265f1b8160016004811061226957612268613acd565b5b6020020181815250506f186b28d92356c4dfec4b5201ad099dbd5f1b8160026004811061229957612298613acd565b5b6020020181815250507fede3781f8998ddf929b4cd7756192185ca7b8f4ef7088f813270ac3d48868a215f1b816003600481106122d9576122d8613acd565b5b6020020181815250505f5f90505b838110156123df575f5f600b73ffffffffffffffffffffffffffffffffffffffff16858560405160200161231c929190614aa7565b6040516020818303038152906040526040516123389190614286565b5f60405180830381855afa9150503d805f8114612370576040519150601f19603f3d011682016040523d82523d5f602084013e612375565b606091505b5091509150816123ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b190614b19565b60405180910390fd5b808060200190518101906123ce9190614c65565b9350505080806001019150506122e7565b50505050565b6123ed61365d565b6f17f1d3a73197d7942695638c4fa9ac0f5f1b815f6004811061241357612412613acd565b5b6020020181815250507fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb5f1b8160016004811061245357612452613acd565b5b6020020181815250506f08b3f481e3aaa0f1a09e30ed741d8ae45f1b8160026004811061248357612482613acd565b5b6020020181815250507ffcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e15f1b816003600481106124c3576124c2613acd565b5b6020020181815250505f7fe22466e928fdccef0de49e3503d2657d00494a00e764fd437bdafa05f5922b1f5f1b90505f5f90505b838110156125ef575f5f600c73ffffffffffffffffffffffffffffffffffffffff16858560405160200161252c929190614c90565b6040516020818303038152906040526040516125489190614286565b5f60405180830381855afa9150503d805f8114612580576040519150601f19603f3d011682016040523d82523d5f602084013e612585565b606091505b5091509150816125ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c190614b19565b60405180910390fd5b808060200190518101906125de9190614c65565b9450505080806001019150506124f7565b50505050565b6125fd6136a1565b6f103121a2ceaae586d240843a398967325f1b815f6008811061262357612622613acd565b5b6020020181815250507f5f8eb5a93e8fea99b62b9f88d8556c80dd726a4b30e84a36eeabaf3592937f275f1b8160016008811061266357612662613acd565b5b6020020181815250506f086b990f3da2aeac0a36143b7d7c82445f1b8160026008811061269357612692613acd565b5b6020020181815250507f28215140db1bb859338764cb58458f081d92664f9053b50b3fbd2e4723121b685f1b816003600881106126d3576126d2613acd565b5b6020020181815250506f0f9e7ba9a86a8f7624aa2b42dcc8772e5f1b8160046008811061270357612702613acd565b5b6020020181815250507f1af4ae115685e60abc2c9b90242167acef3d0be4050bf935eed7c3b6fc7ba77e5f1b8160056008811061274357612742613acd565b5b6020020181815250506f0d22c3652d0dc6f0fc9316e14268477c5f1b8160066008811061277357612772613acd565b5b6020020181815250507f2049ef772e852108d269d9c38dba1d4802e8dae479818184c08f9a569d8784515f1b816007600881106127b3576127b2613acd565b5b6020020181815250506127c46136a1565b6f024aa2b2f08f0a91260805272dc510515f1b815f600881106127ea576127e9613acd565b5b6020020181815250507fc6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb85f1b8160016008811061282a57612829613acd565b5b6020020181815250506f13e02b6052719f607dacd3a088274f655f1b8160026008811061285a57612859613acd565b5b6020020181815250507f596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e5f1b8160036008811061289a57612899613acd565b5b6020020181815250506f0ce5d527727d6e118cc9cdc6da2e351a5f1b816004600881106128ca576128c9613acd565b5b6020020181815250507fadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b828015f1b8160056008811061290a57612909613acd565b5b6020020181815250506f0606c4a02ea734cc32acd2b02bc28b995f1b8160066008811061293a57612939613acd565b5b6020020181815250507fcb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be5f1b8160076008811061297a57612979613acd565b5b6020020181815250505f5f90505b83811015612a80575f5f600d73ffffffffffffffffffffffffffffffffffffffff1685856040516020016129bd929190614d36565b6040516020818303038152906040526040516129d99190614286565b5f60405180830381855afa9150503d805f8114612a11576040519150601f19603f3d011682016040523d82523d5f602084013e612a16565b606091505b509150915081612a5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5290614da9565b60405180910390fd5b80806020019051810190612a6f9190614e75565b935050508080600101915050612988565b50505050565b612a8e6136a1565b6f103121a2ceaae586d240843a398967325f1b815f60088110612ab457612ab3613acd565b5b6020020181815250507f5f8eb5a93e8fea99b62b9f88d8556c80dd726a4b30e84a36eeabaf3592937f275f1b81600160088110612af457612af3613acd565b5b6020020181815250506f086b990f3da2aeac0a36143b7d7c82445f1b81600260088110612b2457612b23613acd565b5b6020020181815250507f28215140db1bb859338764cb58458f081d92664f9053b50b3fbd2e4723121b685f1b81600360088110612b6457612b63613acd565b5b6020020181815250506f0f9e7ba9a86a8f7624aa2b42dcc8772e5f1b81600460088110612b9457612b93613acd565b5b6020020181815250507f1af4ae115685e60abc2c9b90242167acef3d0be4050bf935eed7c3b6fc7ba77e5f1b81600560088110612bd457612bd3613acd565b5b6020020181815250506f0d22c3652d0dc6f0fc9316e14268477c5f1b81600660088110612c0457612c03613acd565b5b6020020181815250507f2049ef772e852108d269d9c38dba1d4802e8dae479818184c08f9a569d8784515f1b81600760088110612c4457612c43613acd565b5b602002018181525050612c556136a1565b6f024aa2b2f08f0a91260805272dc510515f1b815f60088110612c7b57612c7a613acd565b5b6020020181815250507fc6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb85f1b81600160088110612cbb57612cba613acd565b5b6020020181815250506f13e02b6052719f607dacd3a088274f655f1b81600260088110612ceb57612cea613acd565b5b6020020181815250507f596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e5f1b81600360088110612d2b57612d2a613acd565b5b6020020181815250506f0ce5d527727d6e118cc9cdc6da2e351a5f1b81600460088110612d5b57612d5a613acd565b5b6020020181815250507fadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b828015f1b81600560088110612d9b57612d9a613acd565b5b6020020181815250506f0606c4a02ea734cc32acd2b02bc28b995f1b81600660088110612dcb57612dca613acd565b5b6020020181815250507fcb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be5f1b81600760088110612e0b57612e0a613acd565b5b6020020181815250505f7fe22466e928fdccef0de49e3503d2657d00494a00e764fd437bdafa05f5922b1f5f1b90505f5f90505b84811015612f3b575f5f600e73ffffffffffffffffffffffffffffffffffffffff1686858787604051602001612e789493929190614ea1565b604051602081830303815290604052604051612e949190614286565b5f60405180830381855afa9150503d805f8114612ecc576040519150601f19603f3d011682016040523d82523d5f602084013e612ed1565b606091505b509150915081612f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f0d90614f32565b60405180910390fd5b80806020019051810190612f2a9190614e75565b955050508080600101915050612e3f565b5050505050565b612f4a61365d565b6f17f1d3a73197d7942695638c4fa9ac0f5f1b815f60048110612f7057612f6f613acd565b5b6020020181815250507fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb5f1b81600160048110612fb057612faf613acd565b5b6020020181815250506f08b3f481e3aaa0f1a09e30ed741d8ae45f1b81600260048110612fe057612fdf613acd565b5b6020020181815250507ffcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e15f1b816003600481106130205761301f613acd565b5b6020020181815250506130316136a1565b6f024aa2b2f08f0a91260805272dc510515f1b815f6008811061305757613056613acd565b5b6020020181815250507fc6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb85f1b8160016008811061309757613096613acd565b5b6020020181815250506f13e02b6052719f607dacd3a088274f655f1b816002600881106130c7576130c6613acd565b5b6020020181815250507f596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e5f1b8160036008811061310757613106613acd565b5b6020020181815250506f0ce5d527727d6e118cc9cdc6da2e351a5f1b8160046008811061313757613136613acd565b5b6020020181815250507fadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b828015f1b8160056008811061317757613176613acd565b5b6020020181815250506f0606c4a02ea734cc32acd2b02bc28b995f1b816006600881106131a7576131a6613acd565b5b6020020181815250507fcb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be5f1b816007600881106131e7576131e6613acd565b5b6020020181815250505f5f90505b838110156132d7575f5f600f73ffffffffffffffffffffffffffffffffffffffff16858560405160200161322a929190614f50565b6040516020818303038152906040526040516132469190614286565b5f60405180830381855afa9150503d805f811461327e576040519150601f19603f3d011682016040523d82523d5f602084013e613283565b606091505b5091509150816132c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132bf90614fc2565b60405180910390fd5b505080806001019150506131f5565b50505050565b6132e561363b565b6f04090815ad598a06897dd89bcda860f25f1b815f6002811061330b5761330a613acd565b5b6020020181815250507f5837d54e897298ce31e6947378134d3761dc59a572154963e8c954919ecfa82d5f1b8160016002811061334b5761334a613acd565b5b6020020181815250505f5f90505b8281101561344f575f5f601073ffffffffffffffffffffffffffffffffffffffff168460405160200161338c919061505f565b6040516020818303038152906040526040516133a89190614286565b5f60405180830381855afa9150503d805f81146133e0576040519150601f19603f3d011682016040523d82523d5f602084013e6133e5565b606091505b50915091508161342a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613421906150c2565b60405180910390fd5b8080602001905181019061343e919061518e565b935050508080600101915050613359565b505050565b61345c61365d565b6f18c16fe362b7dbdfa102e42bdfd3e2f45f1b815f6004811061348257613481613acd565b5b6020020181815250507fe6191d479437a59db4eb716986bf08ee1f42634db66bde97d6c16bbfd342b3b85f1b816001600481106134c2576134c1613acd565b5b6020020181815250506f0e37812ce1b146d998d5f92bdd5ada2a5f1b816002600481106134f2576134f1613acd565b5b6020020181815250507f31bfd63dfe18311aa91637b5f279dd045763166aa1615e46a50d8d8f475f184e5f1b8160036004811061353257613531613acd565b5b6020020181815250505f5f90505b82811015613636575f5f601173ffffffffffffffffffffffffffffffffffffffff168460405160200161357391906151b9565b60405160208183030381529060405260405161358f9190614286565b5f60405180830381855afa9150503d805f81146135c7576040519150601f19603f3d011682016040523d82523d5f602084013e6135cc565b606091505b509150915081613611576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136089061521c565b60405180910390fd5b808060200190518101906136259190614c65565b935050508080600101915050613540565b505050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060400160405280600290602082028036833780820191505090505090565b604051806101000160405280600890602082028036833780820191505090505090565b5f819050919050565b6136d6816136c4565b82525050565b5f6020820190506136ef5f8301846136cd565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f61010082840312156137205761371f613706565b5b81905092915050565b5f6020828403121561373e5761373d6136fe565b5b5f82013567ffffffffffffffff81111561375b5761375a613702565b5b6137678482850161370a565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6137b282613770565b6137bc818561377a565b93506137cc81856020860161378a565b6137d581613798565b840191505092915050565b5f6020820190508181035f8301526137f881846137a8565b905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b61382881613800565b82525050565b5f6020820190506138415f83018461381f565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61387e82613800565b915061388983613800565b9250828201905073ffffffffffffffffffffffffffffffffffffffff8111156138b5576138b4613847565b5b92915050565b5f6138c5826136c4565b91506138d0836136c4565b92508282019050808211156138e8576138e7613847565b5b92915050565b7f4e6f7420656e6f7567682073746f7261676520736c6f747320746f206c6f61645f8201527f2f75706461746500000000000000000000000000000000000000000000000000602082015250565b5f61394860278361377a565b9150613953826138ee565b604082019050919050565b5f6020820190508181035f8301526139758161393c565b9050919050565b61398581613800565b811461398f575f5ffd5b50565b5f813590506139a08161397c565b92915050565b5f602082840312156139bb576139ba6136fe565b5b5f6139c884828501613992565b91505092915050565b7f4e6f7420656e6f756768206163636f756e747320746f206c6f61642f757064615f8201527f7465000000000000000000000000000000000000000000000000000000000000602082015250565b5f613a2b60228361377a565b9150613a36826139d1565b604082019050919050565b5f6020820190508181035f830152613a5881613a1f565b9050919050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83356001602003843603038112613a8757613a86613a5f565b5b80840192508235915067ffffffffffffffff821115613aa957613aa8613a63565b5b602083019250604082023603831315613ac557613ac4613a67565b5b509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f613b0482613800565b9050919050565b613b1481613afa565b8114613b1e575f5ffd5b50565b5f81359050613b2f81613b0b565b92915050565b5f60208284031215613b4a57613b496136fe565b5b5f613b5784828501613b21565b91505092915050565b5f81905092915050565b7f546869732069732061206c6f6e6720696e70757420737472696e6720666f72205f8201527f707265636f6d70696c6520000000000000000000000000000000000000000000602082015250565b5f613bc4602b83613b60565b9150613bcf82613b6a565b602b82019050919050565b7f616e64206974206973206265696e67207265706561746564206d756c7469706c5f8201527f652074696d657320746f20696e637265617365207468652073697a652e200000602082015250565b5f613c34603e83613b60565b9150613c3f82613bda565b603e82019050919050565b7f4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e735f8201527f656374657475722061646970697363696e6720656c69742e2000000000000000602082015250565b5f613ca4603983613b60565b9150613caf82613c4a565b603982019050919050565b7f566976616d7573206c75637475732075726e61207365642075726e6120756c745f8201527f7269636965732061632074656d706f72206475692073616769747469732e2000602082015250565b5f613d14603f83613b60565b9150613d1f82613cba565b603f82019050919050565b7f496e20636f6e64696d656e74756d20666163696c6973697320706f7274612e205f8201527f536564206e6563206469616d206575206469616d206d6174746973207669766560208201527f7272612e20000000000000000000000000000000000000000000000000000000604082015250565b5f613daa604583613b60565b9150613db582613d2a565b604582019050919050565b7f4e756c6c61206672696e67696c6c612c206f72636920616320657569736d6f645f8201527f2073656d7065722c206d61676e61206469616d20706f72747469746f72206d6160208201527f757269732c200000000000000000000000000000000000000000000000000000604082015250565b5f613e40604683613b60565b9150613e4b82613dc0565b604682019050919050565b7f7175697320736f6c6c696369747564696e2073617069656e206a7573746f20695f8201527f6e206c696265726f2e20566573746962756c756d206d6f6c6c6973206d61757260208201527f697320656e696d2e200000000000000000000000000000000000000000000000604082015250565b5f613ed6604983613b60565b9150613ee182613e56565b604982019050919050565b7f4d6f72626920657569736d6f64206d61676e61206163206c6f72656d207275745f8201527f72756d20656c656d656e74756d2e20546869732069732061206c6f6e6720696e60208201527f70757420737472696e6720666f7220707265636f6d70696c6520000000000000604082015250565b5f613f6c605a83613b60565b9150613f7782613eec565b605a82019050919050565b7f4d6f72626920657569736d6f64206d61676e61206163206c6f72656d207275745f8201527f72756d20656c656d656e74756d2e200000000000000000000000000000000000602082015250565b5f613fdc602f83613b60565b9150613fe782613f82565b602f82019050919050565b5f613ffc82613bb8565b915061400782613c28565b915061401282613c98565b915061401d82613d08565b915061402882613d9e565b915061403382613e34565b915061403e82613eca565b915061404982613f60565b915061405482613c28565b915061405f82613c98565b915061406a82613d08565b915061407582613d9e565b915061408082613e34565b915061408b82613eca565b915061409682613f60565b91506140a182613c28565b91506140ac82613c98565b91506140b782613d08565b91506140c282613d9e565b91506140cd82613e34565b91506140d882613eca565b91506140e382613fd0565b9150819050919050565b7f496e76616c696420707265636f6d70696c6520616464726573730000000000005f82015250565b5f614121601a8361377a565b915061412c826140ed565b602082019050919050565b5f6020820190508181035f83015261414e81614115565b9050919050565b5f819050919050565b61416781614155565b82525050565b5f60ff82169050919050565b6141828161416d565b82525050565b5f60808201905061419b5f83018761415e565b6141a86020830186614179565b6141b5604083018561415e565b6141c2606083018461415e565b95945050505050565b5f6141d582613770565b6141df8185613b60565b93506141ef81856020860161378a565b80840191505092915050565b5f819050919050565b614215614210826136c4565b6141fb565b82525050565b5f61422682856141cb565b91506142328284614204565b6020820191508190509392505050565b5f81519050919050565b5f81905092915050565b5f61426082614242565b61426a818561424c565b935061427a81856020860161378a565b80840191505092915050565b5f6142918284614256565b915081905092915050565b6142a581614155565b81146142af575f5ffd5b50565b5f815190506142c08161429c565b92915050565b5f602082840312156142db576142da6136fe565b5b5f6142e8848285016142b2565b91505092915050565b5f6142fc8284614204565b60208201915081905092915050565b5f6040820190508181035f83015261432381856137a8565b905061433260208301846136cd565b9392505050565b5f6143448289614204565b6020820191506143548288614204565b6020820191506143648287614204565b6020820191506143748286614256565b91506143808285614256565b915061438c8284614256565b9150819050979650505050505050565b5f6080820190506143af5f8301876136cd565b6143bc60208301866136cd565b6143c960408301856136cd565b6143d660608301846136cd565b95945050505050565b7f4543416464206661696c656400000000000000000000000000000000000000005f82015250565b5f614413600c8361377a565b915061441e826143df565b602082019050919050565b5f6020820190508181035f83015261444081614407565b9050919050565b614450816136c4565b811461445a575f5ffd5b50565b5f8151905061446b81614447565b92915050565b5f5f60408385031215614487576144866136fe565b5b5f6144948582860161445d565b92505060206144a58582860161445d565b9150509250929050565b5f6060820190506144c25f8301866136cd565b6144cf60208301856136cd565b6144dc60408301846136cd565b949350505050565b7f45434d756c206661696c656400000000000000000000000000000000000000005f82015250565b5f614518600c8361377a565b9150614523826144e4565b602082019050919050565b5f6020820190508181035f8301526145458161450c565b9050919050565b5f60069050919050565b5f81905092915050565b5f819050919050565b614572816136c4565b82525050565b5f6145838383614569565b60208301905092915050565b5f602082019050919050565b6145a48161454c565b6145ae8184614556565b92506145b982614560565b805f5b838110156145e95781516145d08782614578565b96506145db8361458f565b9250506001810190506145bc565b505050505050565b5f60c0820190506146045f83018461459b565b92915050565b7f454350616972696e67206661696c6564000000000000000000000000000000005f82015250565b5f61463e60108361377a565b91506146498261460a565b602082019050919050565b5f6020820190508181035f83015261466b81614632565b9050919050565b5f819050919050565b5f819050919050565b5f61469e61469961469484614672565b61467b565b61416d565b9050919050565b6146ae81614684565b82525050565b5f819050919050565b5f6146d76146d26146cd846146b4565b61467b565b61416d565b9050919050565b6146e7816146bd565b82525050565b5f6080820190506147005f8301876136cd565b61470d60208301866136cd565b61471a60408301856146a5565b61472760608301846146de565b95945050505050565b5f63ffffffff82169050919050565b5f8160e01b9050919050565b5f6147558261473f565b9050919050565b61476d61476882614730565b61474b565b82525050565b5f819050919050565b61478d61478882614155565b614773565b82525050565b5f7fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b5f819050919050565b6147d86147d382614793565b6147be565b82525050565b5f8115159050919050565b5f8160f81b9050919050565b5f6147ff826147e9565b9050919050565b5f614810826147f5565b9050919050565b614828614823826147de565b614806565b82525050565b5f614839828d61475c565b600482019150614849828c61477c565b602082019150614859828b61477c565b602082019150614869828a61477c565b602082019150614879828961477c565b602082019150614889828861477c565b602082019150614899828761477c565b6020820191506148a982866147c7565b6008820191506148b982856147c7565b6008820191506148c98284614817565b6001820191508190509b9a5050505050505050505050565b7f426c616b653266206661696c65640000000000000000000000000000000000005f82015250565b5f614915600e8361377a565b9150614920826148e1565b602082019050919050565b5f6020820190508181035f83015261494281614909565b9050919050565b5f60a08201905061495c5f83018861415e565b614969602083018761415e565b614976604083018661415e565b614983606083018561415e565b614990608083018461415e565b9695505050505050565b7f70323536566572696679206661696c65640000000000000000000000000000005f82015250565b5f6149ce60118361377a565b91506149d98261499a565b602082019050919050565b5f6020820190508181035f8301526149fb816149c2565b9050919050565b5f60049050919050565b5f81905092915050565b5f819050919050565b614a2881614155565b82525050565b5f614a398383614a1f565b60208301905092915050565b5f602082019050919050565b614a5a81614a02565b614a648184614a0c565b9250614a6f82614a16565b805f5b83811015614a9f578151614a868782614a2e565b9650614a9183614a45565b925050600181019050614a72565b505050505050565b5f61010082019050614abb5f830185614a51565b614ac86080830184614a51565b9392505050565b7f4731416464206661696c656400000000000000000000000000000000000000005f82015250565b5f614b03600c8361377a565b9150614b0e82614acf565b602082019050919050565b5f6020820190508181035f830152614b3081614af7565b9050919050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b614b7182613798565b810181811067ffffffffffffffff82111715614b9057614b8f614b3b565b5b80604052505050565b5f614ba26136f5565b9050614bae8282614b68565b919050565b5f67ffffffffffffffff821115614bcd57614bcc614b3b565b5b602082029050919050565b5f5ffd5b5f614bee614be984614bb3565b614b99565b90508060208402830185811115614c0857614c07614bd8565b5b835b81811015614c315780614c1d88826142b2565b845260208401935050602081019050614c0a565b5050509392505050565b5f82601f830112614c4f57614c4e614b37565b5b6004614c5c848285614bdc565b91505092915050565b5f60808284031215614c7a57614c796136fe565b5b5f614c8784828501614c3b565b91505092915050565b5f60a082019050614ca35f830185614a51565b614cb0608083018461415e565b9392505050565b5f60089050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b614ce981614cb7565b614cf38184614cc1565b9250614cfe82614ccb565b805f5b83811015614d2e578151614d158782614a2e565b9650614d2083614cd4565b925050600181019050614d01565b505050505050565b5f61020082019050614d4a5f830185614ce0565b614d58610100830184614ce0565b9392505050565b7f4732416464206661696c656400000000000000000000000000000000000000005f82015250565b5f614d93600c8361377a565b9150614d9e82614d5f565b602082019050919050565b5f6020820190508181035f830152614dc081614d87565b9050919050565b5f67ffffffffffffffff821115614de157614de0614b3b565b5b602082029050919050565b5f614dfe614df984614dc7565b614b99565b90508060208402830185811115614e1857614e17614bd8565b5b835b81811015614e415780614e2d88826142b2565b845260208401935050602081019050614e1a565b5050509392505050565b5f82601f830112614e5f57614e5e614b37565b5b6008614e6c848285614dec565b91505092915050565b5f6101008284031215614e8b57614e8a6136fe565b5b5f614e9884828501614e4b565b91505092915050565b5f61024082019050614eb55f830187614ce0565b614ec361010083018661415e565b614ed1610120830185614ce0565b614edf61022083018461415e565b95945050505050565b7f47324d534d206661696c656400000000000000000000000000000000000000005f82015250565b5f614f1c600c8361377a565b9150614f2782614ee8565b602082019050919050565b5f6020820190508181035f830152614f4981614f10565b9050919050565b5f61018082019050614f645f830185614a51565b614f716080830184614ce0565b9392505050565b7f424c532050616972696e67206661696c656400000000000000000000000000005f82015250565b5f614fac60128361377a565b9150614fb782614f78565b602082019050919050565b5f6020820190508181035f830152614fd981614fa0565b9050919050565b5f60029050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b61501281614fe0565b61501c8184614fea565b925061502782614ff4565b805f5b8381101561505757815161503e8782614a2e565b965061504983614ffd565b92505060018101905061502a565b505050505050565b5f6040820190506150725f830184615009565b92915050565b7f4d6170204731206661696c6564000000000000000000000000000000000000005f82015250565b5f6150ac600d8361377a565b91506150b782615078565b602082019050919050565b5f6020820190508181035f8301526150d9816150a0565b9050919050565b5f67ffffffffffffffff8211156150fa576150f9614b3b565b5b602082029050919050565b5f615117615112846150e0565b614b99565b9050806020840283018581111561513157615130614bd8565b5b835b8181101561515a578061514688826142b2565b845260208401935050602081019050615133565b5050509392505050565b5f82601f83011261517857615177614b37565b5b6002615185848285615105565b91505092915050565b5f604082840312156151a3576151a26136fe565b5b5f6151b084828501615164565b91505092915050565b5f6080820190506151cc5f830184614a51565b92915050565b7f4d6170204732206661696c6564000000000000000000000000000000000000005f82015250565b5f615206600d8361377a565b9150615211826151d2565b602082019050919050565b5f6020820190508181035f830152615233816151fa565b905091905056fea2646970667358221220b56a1c1a7b785bb0405f48e45c04a5cbdf70bec33b69a6bdc4f1184b30fc7b1d64736f6c634300081c0033",
}

// SimulatorABI is the input ABI used to generate the binding from.
// Deprecated: Use SimulatorMetaData.ABI instead.
var SimulatorABI = SimulatorMetaData.ABI

// SimulatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SimulatorMetaData.Bin instead.
var SimulatorBin = SimulatorMetaData.Bin

// DeploySimulator deploys a new Ethereum contract, binding an instance of Simulator to it.
func DeploySimulator(auth *bind.TransactOpts, backend bind.ContractBackend, offset *big.Int) (common.Address, *types.Transaction, *Simulator, error) {
	parsed, err := SimulatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SimulatorBin), backend, offset)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Simulator{SimulatorCaller: SimulatorCaller{contract: contract}, SimulatorTransactor: SimulatorTransactor{contract: contract}, SimulatorFilterer: SimulatorFilterer{contract: contract}}, nil
}

// Simulator is an auto generated Go binding around an Ethereum contract.
type Simulator struct {
	SimulatorCaller     // Read-only binding to the contract
	SimulatorTransactor // Write-only binding to the contract
	SimulatorFilterer   // Log filterer for contract events
}

// SimulatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimulatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimulatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimulatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimulatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimulatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimulatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimulatorSession struct {
	Contract     *Simulator        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SimulatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimulatorCallerSession struct {
	Contract *SimulatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SimulatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimulatorTransactorSession struct {
	Contract     *SimulatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SimulatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimulatorRaw struct {
	Contract *Simulator // Generic contract binding to access the raw methods on
}

// SimulatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimulatorCallerRaw struct {
	Contract *SimulatorCaller // Generic read-only contract binding to access the raw methods on
}

// SimulatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimulatorTransactorRaw struct {
	Contract *SimulatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimulator creates a new instance of Simulator, bound to a specific deployed contract.
func NewSimulator(address common.Address, backend bind.ContractBackend) (*Simulator, error) {
	contract, err := bindSimulator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Simulator{SimulatorCaller: SimulatorCaller{contract: contract}, SimulatorTransactor: SimulatorTransactor{contract: contract}, SimulatorFilterer: SimulatorFilterer{contract: contract}}, nil
}

// NewSimulatorCaller creates a new read-only instance of Simulator, bound to a specific deployed contract.
func NewSimulatorCaller(address common.Address, caller bind.ContractCaller) (*SimulatorCaller, error) {
	contract, err := bindSimulator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimulatorCaller{contract: contract}, nil
}

// NewSimulatorTransactor creates a new write-only instance of Simulator, bound to a specific deployed contract.
func NewSimulatorTransactor(address common.Address, transactor bind.ContractTransactor) (*SimulatorTransactor, error) {
	contract, err := bindSimulator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimulatorTransactor{contract: contract}, nil
}

// NewSimulatorFilterer creates a new log filterer instance of Simulator, bound to a specific deployed contract.
func NewSimulatorFilterer(address common.Address, filterer bind.ContractFilterer) (*SimulatorFilterer, error) {
	contract, err := bindSimulator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimulatorFilterer{contract: contract}, nil
}

// bindSimulator binds a generic wrapper to an already deployed contract.
func bindSimulator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SimulatorMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Simulator *SimulatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Simulator.Contract.SimulatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Simulator *SimulatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simulator.Contract.SimulatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Simulator *SimulatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Simulator.Contract.SimulatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Simulator *SimulatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Simulator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Simulator *SimulatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simulator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Simulator *SimulatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Simulator.Contract.contract.Transact(opts, method, params...)
}

// HashLongString is a free data retrieval call binding the contract method 0x7b582866.
//
// Solidity: function hashLongString() pure returns(string)
func (_Simulator *SimulatorCaller) HashLongString(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "hashLongString")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// HashLongString is a free data retrieval call binding the contract method 0x7b582866.
//
// Solidity: function hashLongString() pure returns(string)
func (_Simulator *SimulatorSession) HashLongString() (string, error) {
	return _Simulator.Contract.HashLongString(&_Simulator.CallOpts)
}

// HashLongString is a free data retrieval call binding the contract method 0x7b582866.
//
// Solidity: function hashLongString() pure returns(string)
func (_Simulator *SimulatorCallerSession) HashLongString() (string, error) {
	return _Simulator.Contract.HashLongString(&_Simulator.CallOpts)
}

// NumAccountsNeeded is a free data retrieval call binding the contract method 0xcb805ac1.
//
// Solidity: function num_accounts_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint160)
func (_Simulator *SimulatorCaller) NumAccountsNeeded(opts *bind.CallOpts, config SimulatorConfig) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_accounts_needed", config)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumAccountsNeeded is a free data retrieval call binding the contract method 0xcb805ac1.
//
// Solidity: function num_accounts_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint160)
func (_Simulator *SimulatorSession) NumAccountsNeeded(config SimulatorConfig) (*big.Int, error) {
	return _Simulator.Contract.NumAccountsNeeded(&_Simulator.CallOpts, config)
}

// NumAccountsNeeded is a free data retrieval call binding the contract method 0xcb805ac1.
//
// Solidity: function num_accounts_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint160)
func (_Simulator *SimulatorCallerSession) NumAccountsNeeded(config SimulatorConfig) (*big.Int, error) {
	return _Simulator.Contract.NumAccountsNeeded(&_Simulator.CallOpts, config)
}

// NumAddressInitialized is a free data retrieval call binding the contract method 0xe2b5a25c.
//
// Solidity: function num_address_initialized() view returns(uint160)
func (_Simulator *SimulatorCaller) NumAddressInitialized(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_address_initialized")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumAddressInitialized is a free data retrieval call binding the contract method 0xe2b5a25c.
//
// Solidity: function num_address_initialized() view returns(uint160)
func (_Simulator *SimulatorSession) NumAddressInitialized() (*big.Int, error) {
	return _Simulator.Contract.NumAddressInitialized(&_Simulator.CallOpts)
}

// NumAddressInitialized is a free data retrieval call binding the contract method 0xe2b5a25c.
//
// Solidity: function num_address_initialized() view returns(uint160)
func (_Simulator *SimulatorCallerSession) NumAddressInitialized() (*big.Int, error) {
	return _Simulator.Contract.NumAddressInitialized(&_Simulator.CallOpts)
}

// NumStorageDeleted is a free data retrieval call binding the contract method 0x39aa1ab9.
//
// Solidity: function num_storage_deleted() view returns(uint256)
func (_Simulator *SimulatorCaller) NumStorageDeleted(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_storage_deleted")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStorageDeleted is a free data retrieval call binding the contract method 0x39aa1ab9.
//
// Solidity: function num_storage_deleted() view returns(uint256)
func (_Simulator *SimulatorSession) NumStorageDeleted() (*big.Int, error) {
	return _Simulator.Contract.NumStorageDeleted(&_Simulator.CallOpts)
}

// NumStorageDeleted is a free data retrieval call binding the contract method 0x39aa1ab9.
//
// Solidity: function num_storage_deleted() view returns(uint256)
func (_Simulator *SimulatorCallerSession) NumStorageDeleted() (*big.Int, error) {
	return _Simulator.Contract.NumStorageDeleted(&_Simulator.CallOpts)
}

// NumStorageInitialized is a free data retrieval call binding the contract method 0xee2bb32b.
//
// Solidity: function num_storage_initialized() view returns(uint256)
func (_Simulator *SimulatorCaller) NumStorageInitialized(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_storage_initialized")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStorageInitialized is a free data retrieval call binding the contract method 0xee2bb32b.
//
// Solidity: function num_storage_initialized() view returns(uint256)
func (_Simulator *SimulatorSession) NumStorageInitialized() (*big.Int, error) {
	return _Simulator.Contract.NumStorageInitialized(&_Simulator.CallOpts)
}

// NumStorageInitialized is a free data retrieval call binding the contract method 0xee2bb32b.
//
// Solidity: function num_storage_initialized() view returns(uint256)
func (_Simulator *SimulatorCallerSession) NumStorageInitialized() (*big.Int, error) {
	return _Simulator.Contract.NumStorageInitialized(&_Simulator.CallOpts)
}

// NumStorageSlotsNeeded is a free data retrieval call binding the contract method 0x768c39af.
//
// Solidity: function num_storage_slots_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint256)
func (_Simulator *SimulatorCaller) NumStorageSlotsNeeded(opts *bind.CallOpts, config SimulatorConfig) (*big.Int, error) {
	var out []interface{}
	err := _Simulator.contract.Call(opts, &out, "num_storage_slots_needed", config)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumStorageSlotsNeeded is a free data retrieval call binding the contract method 0x768c39af.
//
// Solidity: function num_storage_slots_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint256)
func (_Simulator *SimulatorSession) NumStorageSlotsNeeded(config SimulatorConfig) (*big.Int, error) {
	return _Simulator.Contract.NumStorageSlotsNeeded(&_Simulator.CallOpts, config)
}

// NumStorageSlotsNeeded is a free data retrieval call binding the contract method 0x768c39af.
//
// Solidity: function num_storage_slots_needed((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) view returns(uint256)
func (_Simulator *SimulatorCallerSession) NumStorageSlotsNeeded(config SimulatorConfig) (*big.Int, error) {
	return _Simulator.Contract.NumStorageSlotsNeeded(&_Simulator.CallOpts, config)
}

// InitializeAddressChunk is a paid mutator transaction binding the contract method 0x3594dea6.
//
// Solidity: function initialize_address_chunk() returns()
func (_Simulator *SimulatorTransactor) InitializeAddressChunk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simulator.contract.Transact(opts, "initialize_address_chunk")
}

// InitializeAddressChunk is a paid mutator transaction binding the contract method 0x3594dea6.
//
// Solidity: function initialize_address_chunk() returns()
func (_Simulator *SimulatorSession) InitializeAddressChunk() (*types.Transaction, error) {
	return _Simulator.Contract.InitializeAddressChunk(&_Simulator.TransactOpts)
}

// InitializeAddressChunk is a paid mutator transaction binding the contract method 0x3594dea6.
//
// Solidity: function initialize_address_chunk() returns()
func (_Simulator *SimulatorTransactorSession) InitializeAddressChunk() (*types.Transaction, error) {
	return _Simulator.Contract.InitializeAddressChunk(&_Simulator.TransactOpts)
}

// InitializeStorageChunk is a paid mutator transaction binding the contract method 0x4e83a9d5.
//
// Solidity: function initialize_storage_chunk() returns()
func (_Simulator *SimulatorTransactor) InitializeStorageChunk(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Simulator.contract.Transact(opts, "initialize_storage_chunk")
}

// InitializeStorageChunk is a paid mutator transaction binding the contract method 0x4e83a9d5.
//
// Solidity: function initialize_storage_chunk() returns()
func (_Simulator *SimulatorSession) InitializeStorageChunk() (*types.Transaction, error) {
	return _Simulator.Contract.InitializeStorageChunk(&_Simulator.TransactOpts)
}

// InitializeStorageChunk is a paid mutator transaction binding the contract method 0x4e83a9d5.
//
// Solidity: function initialize_storage_chunk() returns()
func (_Simulator *SimulatorTransactorSession) InitializeStorageChunk() (*types.Transaction, error) {
	return _Simulator.Contract.InitializeStorageChunk(&_Simulator.TransactOpts)
}

// Run is a paid mutator transaction binding the contract method 0x458240e8.
//
// Solidity: function run((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) returns()
func (_Simulator *SimulatorTransactor) Run(opts *bind.TransactOpts, config SimulatorConfig) (*types.Transaction, error) {
	return _Simulator.contract.Transact(opts, "run", config)
}

// Run is a paid mutator transaction binding the contract method 0x458240e8.
//
// Solidity: function run((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) returns()
func (_Simulator *SimulatorSession) Run(config SimulatorConfig) (*types.Transaction, error) {
	return _Simulator.Contract.Run(&_Simulator.TransactOpts, config)
}

// Run is a paid mutator transaction binding the contract method 0x458240e8.
//
// Solidity: function run((uint160,uint160,uint160,uint256,uint256,uint256,uint256,(address,uint256)[]) config) returns()
func (_Simulator *SimulatorTransactorSession) Run(config SimulatorConfig) (*types.Transaction, error) {
	return _Simulator.Contract.Run(&_Simulator.TransactOpts, config)
}
