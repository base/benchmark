---
description: 
globs: 
alwaysApply: false
---
# Project Structure and Organization

## Directory Structure

### Root Level
- **benchmark/**: Go-based benchmark runner and core logic
- **contracts/**: Solidity smart contracts for testing
- **configs/**: YAML configuration files for different benchmark scenarios
- **report/**: React-based web UI for viewing benchmark results
- **runner/**: Go-based execution engine
- **scripts/**: Utility scripts for setup and automation

### Report UI Structure ([report/](mdc:report))
```
report/
├── src/
│   ├── components/     # Reusable UI components
│   ├── pages/         # Page-level components
│   ├── hooks/         # Custom React hooks
│   ├── utils/         # Utility functions and formatters
│   └── types.ts       # TypeScript type definitions
├── public/            # Static assets
└── package.json       # Frontend dependencies
```

## Configuration Management

### Benchmark Configs ([configs/](mdc:configs))
- YAML-based configuration files
- Define test parameters and thresholds
- Support for different benchmark scenarios
- Examples: basic.yml, contract.yml, ecadd.yml

### Contract Integration ([contracts/](mdc:contracts))
- Solidity contracts for performance testing
- Integration with Foundry for compilation
- Support for OpenZeppelin contracts
- Test fixtures and mock contracts

## Development Workflow

### Frontend Development
1. Work in the `report/` directory for UI changes
2. Use TypeScript for type safety
3. Follow React functional component patterns
4. Use Tailwind CSS for styling

### Backend Development
1. Work in `benchmark/` and `runner/` directories
2. Use Go for performance-critical code
3. Follow Go conventions and patterns
4. Implement proper error handling

### Testing
- Unit tests for individual components
- Integration tests for benchmark scenarios
- End-to-end tests for complete workflows
- Performance regression testing

## Build and Deployment

### Frontend Build
- Vite-based build system
- Static asset generation
- Optimized bundle output
- Development server with hot reload

### Backend Build
- Go module-based dependencies
- Cross-platform compilation
- Docker containerization support
- Binary distribution

## Data Flow

### Benchmark Execution
1. Configuration files define test parameters
2. Go runner executes benchmarks
3. Results stored in structured format
4. React UI displays and analyzes results

